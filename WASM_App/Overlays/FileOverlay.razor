@using WASM_App.Data
@inject DataService Data
@inject ISnackbar Snackbar

<MudOverlay @bind-Visible="Visible" DarkBackground="true">
    <MudPaper Width="300px">
        <MudPaper Elevation="0" Class="d-flex pt-3 pl-3">
            <MudText>File Upload</MudText>
            <MudSpacer />
            <MudIconButton Style="position: absolute; top: 0px; right: 0px" Icon="@Icons.Material.Outlined.Close" OnClick="@(() => Visible = false)" />
        </MudPaper>
        <MudPaper Elevation="0" Height="100%" Width="100%">
            <MudFileUpload MaximumFileCount="1" T="IBrowserFile" FilesChanged="@UploadFile" Accept=".csv" Class="py-4 align-center">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Upload"
                               for="@context.Id">
                        Upload Files
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </MudPaper>
    </MudPaper>
</MudOverlay>

@code {
    private bool _visible;

    [Parameter]
    public bool Visible
    {
        get => _visible;
        set
        {
            if (_visible != value)
            {
                _visible = value;
                _ = VisibleChanged.InvokeAsync(_visible);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public Action FileUpload { get; set; }

    private async void UploadFile(IBrowserFile file)
    {
        try
        {
            var stream = file.OpenReadStream();

            using (StreamReader sr = new StreamReader(stream))
            {
                string line = await sr.ReadLineAsync(); // skip first line

                // Read and display lines from the file until the end of
                // the file is reached.
                while ((line = await sr.ReadLineAsync()) != null)
                {
                    try
                    {
                        List<string> lineData = line.Split(",").ToList();
                        if (lineData == null)
                        {
                            throw new FormatException();
                        }

                        Person s = new Person()
                            {
                                Name = lineData.ElementAtOrDefault(1) + " " + lineData.ElementAtOrDefault(2),
                                AttendeeID = lineData.ElementAtOrDefault(3),
                                Gender = lineData.ElementAtOrDefault(4),
                                Age = int.Parse(lineData.ElementAtOrDefault(5))
                            };

                        Data.AddPerson(s);
                    }
                    catch (FormatException e)
                    {
                        Console.WriteLine("Line data failed - " + line);
                    }
                }
            }

            stream.Close();
        }
        catch (Exception e)
        {
            Snackbar.Add("File could not be read - " + e.Message, Severity.Error);
            Console.Error.WriteLine("File could not be read - " + e.Message);
        }

        FileUpload.Invoke();
        StateHasChanged();
    }
}