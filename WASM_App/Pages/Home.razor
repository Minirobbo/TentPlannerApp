@page "/"
@using WASM_App.Overlays
@using WASM_App.Data
@inject SettingsService Settings
@inject DataService Data
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<style>
    @@media print {
        .hide-on-print {
            display: none !important;
        }

        .hide-shadow-on-print {
            box-shadow: none !important;
        }

        .full-on-print {
            width: 100% !important;
        }

        .overflow-on-print {
            overflow-y: visible !important;
        }

        .tent {
            break-inside: avoid;
        }
    }

    .clickable {
        cursor: pointer;
    }
</style>

<PageTitle>Tent Organiser</PageTitle>

<TentPlanning DropContainer="_mudDropContainer" OverlaysController="OverlayController"/>

<SettingsOverlay @bind-Visible="OverlayController._settingsOpen" />
<FileOverlay @bind-Visible="OverlayController._uploadFileOpen" FileUpload="@(() => {Data.RefreshItems(); StateHasChanged();})" />
<EditPersonOverlay @bind-Visible="OverlayController._editPersonOpen" OnEdit="@refreshItems" />

@code {
    private MudDropContainer<Person> _mudDropContainer = new();

    public OverlaysControl OverlayController = new();

    protected override void OnInitialized()
    {
        OverlayController.OnRefresh += ((sender, args) => StateHasChanged());
        base.OnInitialized();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            Data.Update += (() =>
            {
                StateHasChanged();
                _mudDropContainer.Refresh();
            });

            Settings.LoadFromStorage();
            Data.LoadFromStorage();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void refreshItems()
    {
        _mudDropContainer.Refresh();
    }
}